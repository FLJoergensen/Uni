#lang racket

;1.1
;;Grad->Bogen
(define (DegToRad v)
  (* v (/ pi 180)))
;;Bogen->Grad
(define (RadToDeg v)
  (* v (/ 180 pi)))

;1.2
(define (my-acos a)
  (* 2 (atan (sqrt (/ (- 1 a) (+ 1 a))))))

;1.3
(define (nmTokm v)
  (* v 1.852))

;2.1
;(DistanzAB 37.75 "N" 122.45 "W" 21.32 "N" 157.83 "W")
;(distanzAB (NewOrt (DegToRad 37.75) "N" (DegToRad 122.45) "W") (NewOrt (DegToRad 21.32) "N" (DegToRad 157.83) "W"))
(define (DistanzAB ALaenge ANS ABreite AEW BLaenge BNS BBreite BEW)
  (distanzAB (NewOrt (DegToRad ALaenge) ANS (DegToRad ABreite) AEW) (NewOrt (DegToRad BLaenge) BNS (DegToRad BBreite) BEW)))
(define (distanzAB A B)
  (nmTokm (* 60
             (RadToDeg (acos (cosdg A B))))))
(define (cosdg a b)
  (+ (* (sin (B a)) (sin (B b)))
     (* (cos (B a)) (cos (B b)) (cos (deltaL a b)))))
(define (L Ort)
  (car (cdr Ort)))
(define (B Ort)
  (car Ort))
(define (deltaL A B)
  (cond ((< (L A) (L B)) (- (L B) (L A)))
        ((> (L A) (L B)) (- (L A) (L B)))
        (else 0)))
(define (NewOrt breite NS laenge EW)
  (list (cond ((eq? NS "S") (* breite -1))
              (else breite))
        (cond ((eq? EW "W") (* laenge -1))
              (laenge))))
;2.2
;(Anfangskurs (NewOrt 10 "N" 20 "W") (NewOrt 55 "S" 0 "E") "W")
(define (Anfangskurs A B EW)
  (cond ((eq? EW "W")(- 360 (ar A B)))
        ((eq? EW "E") (ar A B))
        (else (error "EW ist nicht E oder W"))))
(define (ar A B)
  (acos (/ (- (sin (car B)) (* (cosdg (car A) (car B) (deltaL A B)) (sin (car A))))
           (* (cos (car A)) (sin (acos (cosdg (car A) (car B) (deltaL A B))))))))
;2.3
;(GradToHimmel 20)
;v ist eine belibige zahl
(define (Grad2Himmel v)
  (cond((> v 360) (Grad2Himmel (- v 360)))
       ((< v 0) (Grad2Himmel (+ v 360)))
       ((< v 11.25) "N")
       ((< v 33.75) "NNE")
       ((< v 56.25) "NE")
       ((< v 78.75) "ENE")
       ((< v 101.25) "E")
       ((< v 123.75) "ESE")
       ((< v 146.25) "SE")
       ((< v 168.75) "SSE")
       ((< v 191.25) "S")
       ((< v 213.75) "SSW")
       ((< v 236.25) "SW")
       ((< v 258.75) "WSW")
       ((< v 281.25) "W")
       ((< v 303.75) "WNW")
       ((< v 326.25) "NW")
       ((< v 348.75) "NNW")
       ((< v 371.25) "N")))
;v element aus ("N","NNE","NE"...)
(define (Himmel2Grad v)
  (cond((equal? v "N") 0)
       ((equal? v "NNE") 22.5)
       ((equal? v "NE") 45)
       ((equal? v "ENE") 67.5)
       ((equal? v "E") 90)
       ((equal? v "ESE") 112.5)
       ((equal? v "SE") 135)
       ((equal? v "SSE") 157.5)
       ((equal? v "S") 180)
       ((equal? v "SSW") 202.5)
       ((equal? v "SW") 225)
       ((equal? v "WSW") 247.5)
       ((equal? v "W") 270)
       ((equal? v "WNW") 292.5)
       ((equal? v "NW") 315)
       ((equal? v "NNW") 337.5)
       (else (error "Richtung existiert nicht"))))
